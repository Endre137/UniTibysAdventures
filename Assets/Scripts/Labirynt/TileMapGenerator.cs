using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public class TileMapGenerator : MonoBehaviour
{

    // prefab for the road tile
    public GameObject roadPrefab;
    public GameObject npcPrefab;

    public GameObject trapPrefab;

    public GameObject backgroundPrefab;

    public GameObject computerPrefab;

    public GameObject treePrefab;

    public GameObject grass1Prefab;

    public GameObject grass2Prefab;

    



    EnvironmentController environmentController;
    APIQuestion apiQuestion;

    


System.Random random = new System.Random();

 public int[,]map1 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,5,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,22,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,5,1,5,5,5,5,5,5,12,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,5,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,1,5,5,5,5,5,5,5,5,5,22,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
    };



        public int[,]map2 = new int [40,40] {
        {0,0,0,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,5,5,5,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,3,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,5,5,22,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,1,1,3,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,1,5,5,5,5,5,5,22,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,5,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,0,5,5,5,5,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,0,5,1,3,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,5,5,0,0,0,5,1,5,5,5,22,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,5,5,5,5,5,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,5,1,3,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,5,1,5,5,5,5,22,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,5,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,5,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,5,1,5,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
    };



public int[,]map3 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1} ,
        {0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,22,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,5,0,0,0,0,0} ,
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,12,5,5,5,5,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,22,5,5,5,5,5,5,5,1,5,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,5,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0} ,
        {0,0,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,5,5,5,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,12,5,5,5,5,5,5,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0} 
    };
    


    

    public int[,]map4 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,12,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,0} ,
        {0,0,0,0,5,5,5,5,5,1,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0} ,
        {0,0,0,0,5,1,3,1,1,1,1,1,1,1,5,0,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,5,1,5,5,5,5,5,5,0} ,
        {0,0,0,0,5,1,5,5,5,22,5,5,5,1,5,0,0,0,0,0,0,5,1,1,1,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,5,5,5,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,5,5,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,5,5,5,5,1,5,0,0,0,0,0,0} ,
        {0,0,5,1,1,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,5,1,1,1,1,5,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,1,5,0,0,0,0,5,1,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,5,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,5,0,0,5,1,5,5,5,5,12,5,5,5,5,5,5,5,5,5,5,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,12,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,22,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,5,5,5,5,5,1,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,1,1,1,1,1,1,3,1,1,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,1,5,0,0,0,0,0,5,1,5,5,5,12,5,5,5,5,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,5,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,5,4,5,0,0,0,0,0,0,0,5,4,5,0,0,0} 
    };
    
    

    public int[,]map5 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,1,22,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,5,5,5,5,1,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,1,5,0,0,0,0,5,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,5,1,5,5,22,5,5,5,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,5,3,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,1,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,3,1,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,12,5,5,5,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,0} ,
        {0,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,1,1,1,1,1,5,0} ,
        {0,5,4,1,1,1,1,1,1,1,1,5,0,0,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,0,0,5,5,5,5,5,5,5,5,0} ,
        {0,5,5,5,5,5,5,5,5,5,1,5,0,0,5,1,1,1,1,1,1,1,1,1,1,3,1,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,5,1,5,5,5,5,5,5,12,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,12,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,5,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
    };


    public int[,]map6 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,5,5,5,5,5,5,32,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,5,5,5,5,5,5,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,5,5,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,0,0,5,1,1,1,1,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,5,1,1,1,1,1,1,4,5,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,0,5,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,22,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,52,1,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1} ,
        {0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,52,1,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} 
    };

        public int[,]map7 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,42,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,3,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,5,0,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,1,1,3,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,5,5,5,5,42,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,1,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,5,5,5,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,32,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,3,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,1,5,22,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}  };


    public int[,]map8 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,0,5,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,1,5,5,5,5,5,5,5,5,5,5,32,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,22,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,42,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0} ,
        {0,0,0,0,0,0,0,5,1,5,1,1,1,1,1,1,3,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0} ,
        {0,0,0,0,0,0,0,5,5,5,1,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,52,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,4,5,0,0,0,0,0,0} ,
        {0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}  };


    public int[,]map9 = new int [40,40] {
        {0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,1,1,1,1,1,1,5,0,0,0} ,
        {0,0,0,5,1,5,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,5,0,0,0} ,
        {0,0,8,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,5,5,5,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0,5,1,5,8,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,1,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,5,5,5,5,52,1,5,5,5,5,5,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,0,0,5,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,5} ,
        {0,0,0,0,0,5,1,5,5,5,5,1,5,5,5,5,5,5,5,5,5,5,5,32,1,5,5,5,5,5,5,5,5,5,5,5,5,5,5,5} ,
        {0,0,0,0,0,5,1,5,0,0,5,3,5,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,5,1,5,0,0,0,0,0,8,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,5,1,5,8,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,1,5,0,0,5,1,5,8,0,0,0,0,8,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,5,5,5,8,0,5,1,5,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,5,5,5,5,5,5,5,5,22,1,5,5,5,5,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,5,1,1,1,1,1,3,1,1,1,1,1,1,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,5,5,5,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,5,5,5,5,5,5,5,5,52,1,5,5,5,5,5,5,5,5,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,5,5,5,5,5,5,1,5,5,5,5,5,5,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,3,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,4,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,5,1,5,0,0,0,0,0,5,5,5,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,1,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,5,5,5,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0} ,
        {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}  };



    public int[,]map = new int [40,40];
    




    // Start is called before the first frame update
    void Start()
    {
        //mapController.Start();
        // draw the tile map
    
        
        Map Map1 = new Map(map1);
        maps.Add(Map1);

        
        Map Map2 = new Map(map2);
        maps.Add(Map2);

        Map Map3 = new Map(map3);
        maps.Add(Map3);

        Map Map4 = new Map(map4);
        maps.Add(Map4);
        
        
        Map Map5 = new Map(map5);
        maps.Add(Map5);
        
        
        Map Map6 = new Map(map6);
        maps.Add(Map6);

        
        Map Map7 = new Map(map7);
        maps.Add(Map7);
        
        Map Map8 = new Map(map8);
        maps.Add(Map8);

        
        //Map Map9 = new Map(map9);
        //maps.Add(Map9);

        environmentController = GameObject.Find("EnvironmentController").GetComponent<EnvironmentController>();

        apiQuestion = GameObject.Find("APIQuestion").GetComponent<APIQuestion>();
        
        //environmentController.ChangeToWinter();
        //environmentController.ChangeToCave();
        //environmentController.ChangeToDesert();
        //environmentController.ChangeToIsland();
        //apiQuestion.Start();
        ChangeMap();
        ChangeMap();
        DrawMap();
    }



    // function to draw the tile map
    public void DrawMap()
    {   


        int height = map.GetLength(0);
        int width = map.GetLength(1);
        int NPC_counter=0;

        List<Tuple<int, int>> zero_positions = new List<Tuple<int, int>>();

        for (int x = 0; x < width; x++)
        {
            for (int y = 0; y < height; y++)
            {   

                if(map[x, y] > 10){
                    if(map[x, y] == 12){

                        QuestionData question = apiQuestion.Get2AnswersQuestion();

                        GameObject tile = Instantiate(npcPrefab, new Vector3(y, x, 0), Quaternion.identity);
                        
                        tile.tag = "Generated";

                        

                        //set id for NPC
                        NPC_counter++;

                        tile.name = "NPC" + NPC_counter.ToString();

                        // set the tile's parent to this game object
                        tile.transform.parent = transform;

                        String QuestionText = question.content;
                        Debug.Log("Question" + QuestionText);
                        String correctAnswer = question.questionAnswers[0].content;
                        String badAnswer = question.questionAnswers[1].content;
                        List<Message> messages = new List<Message> {new Message(0,QuestionText)};
                        messages.Add(new Message(0, "Left:" + correctAnswer));
                        messages.Add(new Message(0, "Right:" + badAnswer));
                        messages.Add(new Message(0, "The first answer represents the left road and the second answer represents the right road."));

                        tile.GetComponent<DialogueTrigger>().messages = messages;
                        continue;
                    }


                    if(map[x, y] == 22){

                        QuestionData question = apiQuestion.Get2AnswersQuestion();

                        

                        GameObject tile = Instantiate(npcPrefab, new Vector3(y, x, 0), Quaternion.identity);
                        
                        tile.tag = "Generated";

                        

                        //set id for NPC
                        NPC_counter++;

                        tile.name = "NPC" + NPC_counter.ToString();

                        // set the tile's parent to this game object
                        tile.transform.parent = transform;

                        String QuestionText = question.content;
                        Debug.Log("Question" + QuestionText);
                        String correctAnswer = question.questionAnswers[0].content;
                        String badAnswer = question.questionAnswers[1].content;
                        List<Message> messages = new List<Message> {new Message(0,QuestionText)};
                        messages.Add(new Message(0, "Left:" + badAnswer));
                        messages.Add(new Message(0, "Right:" + correctAnswer));
                        messages.Add(new Message(0, "The first answer represents the left road and the second answer represents the right road."));

                        tile.GetComponent<DialogueTrigger>().messages = messages;
                        continue;
                    }


                    if(map[x, y] == 32){

                        QuestionData question = apiQuestion.Get3AnswersQuestion();

                        

                        GameObject tile = Instantiate(npcPrefab, new Vector3(y, x, 0), Quaternion.identity);
                        
                        tile.tag = "Generated";

                        

                        //set id for NPC
                        NPC_counter++;

                        tile.name = "NPC" + NPC_counter.ToString();

                        // set the tile's parent to this game object
                        tile.transform.parent = transform;

                        String QuestionText = question.content;
                        Debug.Log("Question" + QuestionText);
                        String correctAnswer = question.questionAnswers[0].content;
                        String badAnswer1 = question.questionAnswers[1].content;
                        String badAnswer2 = question.questionAnswers[2].content;
                        List<Message> messages = new List<Message> {new Message(0,QuestionText)};
                        messages.Add(new Message(0, "Left:" + correctAnswer));
                        messages.Add(new Message(0, "Middle:" + badAnswer1));
                        messages.Add(new Message(0, "Right:" + badAnswer2));
                        messages.Add(new Message(0, "The first answer represents the left road, the second answer represents the middle road and the third answer represents the right road."));

                        tile.GetComponent<DialogueTrigger>().messages = messages;
                        continue;
                    }


                    if(map[x, y] == 42){

                        QuestionData question = apiQuestion.Get3AnswersQuestion();

                        

                        GameObject tile = Instantiate(npcPrefab, new Vector3(y, x, 0), Quaternion.identity);
                        
                        tile.tag = "Generated";

                        

                        //set id for NPC
                        NPC_counter++;

                        tile.name = "NPC" + NPC_counter.ToString();

                        // set the tile's parent to this game object
                        tile.transform.parent = transform;

                        String QuestionText = question.content;
                        Debug.Log("Question" + QuestionText);
                        String correctAnswer = question.questionAnswers[0].content;
                        String badAnswer1 = question.questionAnswers[1].content;
                        String badAnswer2 = question.questionAnswers[2].content;
                        List<Message> messages = new List<Message> {new Message(0,QuestionText)};
                        messages.Add(new Message(0, "Left:" + badAnswer1));
                        messages.Add(new Message(0, "Middle:" + correctAnswer));
                        messages.Add(new Message(0, "Right:" + badAnswer2));

                        messages.Add(new Message(0, "The first answer represents the left road, the second answer represents the middle road and the third answer represents the right road."));

                        tile.GetComponent<DialogueTrigger>().messages = messages;
                        continue;
                    }

                    if(map[x, y] == 52){

                        QuestionData question = apiQuestion.Get3AnswersQuestion();

                        

                        GameObject tile = Instantiate(npcPrefab, new Vector3(y, x, 0), Quaternion.identity);
                        
                        tile.tag = "Generated";

                        

                        //set id for NPC
                        NPC_counter++;

                        tile.name = "NPC" + NPC_counter.ToString();

                        // set the tile's parent to this game object
                        tile.transform.parent = transform;

                        String QuestionText = question.content;
                        Debug.Log("Question" + QuestionText);
                        String correctAnswer = question.questionAnswers[0].content;
                        String badAnswer1 = question.questionAnswers[1].content;
                        String badAnswer2 = question.questionAnswers[2].content;
                        List<Message> messages = new List<Message> {new Message(0,QuestionText)};
                        messages.Add(new Message(0, "Left:" + badAnswer1));
                        messages.Add(new Message(0, "Middle:" + badAnswer2));
                        messages.Add(new Message(0, "Right:" + correctAnswer));

                        messages.Add(new Message(0, "The first answer represents the left road, the second answer represents the middle road and the third answer represents the right road."));

                        tile.GetComponent<DialogueTrigger>().messages = messages;
                        continue;
                    }

                }


                // if the current tile is a road tile (i.e., contains a one in the map)
                if (map[x, y] == 1)
                {
                    // instantiate a road tile at the current position
                    GameObject tile = Instantiate(roadPrefab, new Vector3(y, x, 0), Quaternion.identity);

                    tile.tag = "Generated";
                    // set the tile's parent to this game object
                    tile.transform.parent = transform;
                    continue;
                }

                if (map[x, y] == 2)
                {
                    
                    GameObject tile = Instantiate(npcPrefab, new Vector3(y, x, 0), Quaternion.identity);
                    
                    tile.tag = "Generated";

                    //set id for NPC
                    NPC_counter++;

                    tile.name = "NPC" + NPC_counter.ToString();

                    // set the tile's parent to this game object
                    tile.transform.parent = transform;
                    continue;
                }        


                if (map[x, y] == 3)
                {
                    // instantiate a trap tile at the current position
                    GameObject tile = Instantiate(trapPrefab, new Vector3(y, x, 0), Quaternion.identity);

                    tile.tag = "Generated";
                    // set the tile's parent to this game object
                    tile.transform.parent = transform;
                    continue;
                }  

                if (map[x, y] == 4)
                {
                    // instantiate a computer tile at the current position
                    GameObject tile = Instantiate(computerPrefab, new Vector3(y, x, 0), Quaternion.identity);

                    tile.tag = "Generated";
                    // set the tile's parent to this game object
                    tile.transform.parent = transform;
                    continue;
                }  

                if (map[x, y] == 5)
                {
                    // instantiate a background tile at the current position
                    GameObject tile = Instantiate(backgroundPrefab, new Vector3(y, x, 0), Quaternion.identity);

                    tile.tag = "Generated";
                    
                    // set the tile's parent to this game object
                    tile.transform.parent = transform;
                    continue;
                }  

                if (map[x, y] == 0){

                    System.Random random = new System.Random();
                    double randomNumber = random.NextDouble();

                    //randomNumber - to generate trees randomly 
                    //Check if the element is at edge 
                    if(randomNumber <= 0.1 && x !=0 && x != width-1 && y != 0 && y != height-1){

                        //Need to be a 9x9 submatrix with nulls to insert a tree 
                        if(CanInsertTree(x,y)){
                            GameObject tile = Instantiate(treePrefab, new Vector3(y, x, 0), Quaternion.identity);
                            tile.tag = "Generated";
                            tile.transform.parent = transform;
                        }
                        else{
                            zero_positions.Add(Tuple.Create(x,y));
                        }
                        
                    }

                    else{
                    zero_positions.Add(Tuple.Create(x,y));
                    }
                    continue;
                }

            }

            for(int k = 0;  k< zero_positions.Count/100; ++k){

                System.Random rnd = new System.Random();
                int randIndex = rnd.Next(zero_positions.Count);


                Tuple<int , int> position = zero_positions[randIndex];
                zero_positions.RemoveAt(randIndex);
                int i = position.Item1;
                int j = position.Item2;

                if(randIndex % 2 == 0){
                    GameObject tile = Instantiate(grass1Prefab, new Vector3(j, i, 0), Quaternion.identity);
                    tile.tag = "Generated";
                    tile.transform.parent = transform;
                }else{
                    GameObject tile = Instantiate(grass2Prefab, new Vector3(j, i, 0), Quaternion.identity); 
                    tile.tag = "Generated";
                    tile.transform.parent = transform;
                }
                

            }
        }
    }



    public void ClearMap(){
        
        UnityEngine.Object[] allObjects = FindObjectsOfType(typeof(GameObject));
        //Delete all game objects with tag Generated
        GameObject[] gameObjects = GameObject.FindGameObjectsWithTag("Generated");
        foreach(GameObject obj in gameObjects) {
            Destroy(obj);
        }
    }


    public void ChangeChapter(){
        maps.Clear();

        Map Map6 = new Map(map6);
        maps.Add(Map6);

        
        Map Map7 = new Map(map7);
        maps.Add(Map7);
        
        Map Map8 = new Map(map8);
        maps.Add(Map8);

        
        Map Map9 = new Map(map9);
        maps.Add(Map9);

        ChangeMap();
        DrawMap();
    }






    


    
    public class Map{
        public int [,]structure = new int [40, 40];

        public Map(int [,] structure){
            this.structure = structure;
        }
    }


    public List<Map> maps = new List<Map>();
    TileMapGenerator tileMapGenerator;



    void AddMap(Map map){
        maps.Add(map);
    }
    
    public void ChangeMap(){        
        int randomIndex = random.Next(0, maps.Count);
        map = maps[randomIndex].structure;
    }

    public bool CanInsertTree(int x, int y){
        
        if(map[x-1,y-1] == 0 && map[x-1,y] == 0 && map[x-1,y+1] == 0 && map[x,y-1] == 0 && map[x,y+1] == 0
        && map[x+1,y-1] == 0 && map[x+1,y] == 0 && map[x+1,y+1] == 0){

            
            map[x-1,y-1] = -1;
            map[x-1,y] = -1;
            map[x-1,y+1] = -1;
            map[x,y-1] = -1;
            map[x,y+1] = -1;
            map[x+1,y-1] = -1;
            map[x+1,y] = -1;
            map[x+1,y+1] = -1;
            
            return true;
        }

        return false;
    }

}
